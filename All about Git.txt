Коммит - промежуточная версия кода
Состояния файлов: изменен, готов к коммиту, закомичен. Все измененные файлы с помощью команды "git add ." добавляются в индекс а затем коммитятся.
Для просмотра состояния - "git status" 

git commit -m "Комментарий к коммиту" - создание коммита

"git log" - выводит список коммитов
Если после добавления файла в индекс в нем произошли изменения, то они не попадут в коммит без повторного добавления этого файла в индекс.

git init - инициализируем новый репозиторий

Изменения, которые должны попасть в коммит называются "staged изменения"
"notstaged изменения" - отслеживаются, но не добавлены в индекс
untracked - файлы, которые добавлены в проект, но не отслеживаются системой контроля версий

git add filename1.txt filename2.txt - точечное добавление в индекс

Частичые коммиты: git add -p filename.txt - запросит варианты:
y - добавить все изменения
n - не добавлять изменения
q - выйти
s - разделить на более мелкие фрагменты

.gitignore - файл в корне репозитория, в котором перечисляются неотслеживаемые файлы, сам .gitignore принято отслеживать.

git rm --cached test.txt - удалить файл из отслеживания, без удаления файла
git rm test.txt - удалить файл из отслеживания и из системы

git mv lastnametest.txt newnametest.txt - переименовать файл из в

git show - отображает последний комит

Просмотр изменений в командной строке:
	выводим список всех коммитов с помощью git log и копируем хэши коммитов для сравнения:
		git diff 98081082bbc5f5fde14e14534ca85c9fb802e8ff c5a46817de3caa781786bdf90c44f6b819a7efdc
		При этом 1й коммит, более поздний (снизу вверх идем)
	Вместо значения хешей можно использовать HEAD-указатели:
		git diff HEAD~2 
		HEAD соответствует последнему коммиту, а цифра после тильды порядковому номеру коммита, начиная со следующего после HEAD.
	
	git diff HEAD~2 HEAD~1 сравнение 3 и 2 коммита
	
Также git diff позволяет просмотреть изменения, внесенные в файл, но которые не были внесены в индекс и закоммичены:
	git diff test.txt
	
git diff --name-only хэш-коммита - выводит только имена измененных файлов
	
Отмена изменений:
	изменения не добавленные в индекс отменяются с помощью checkout
		git checkout -- test.txt
	изменения добавленные в индекс:
		git reset HEAD test.txt - вернет файл из индекса в unstaged (т.е. уберет его из индекса) и после этого вызывается git checkout
		
Если изменения все же были закомичены, но мы хотим внести изменения в этот коммит (последний), то мы должны добавить наши новые изменения в индекс и выполнить команду:
	git commit --amend 	- откроется окно редактора кода, в котором мы можем внести изменения в название коммита, сохраняем и закрываем редактор и таким образом изменяем последний сделанный коммит.
	
Откат к нужной версии кода:
	git revert 98081082bbc5f5fde14e14534ca85c9fb802e8ff   - восстанавливает состояние кода до предыдущего, при этом тоже создает коммит, указываем описание, закрываем редактор.
	
Удаление коммитов:
	жесткий способ (удаляет коммиты после указанного, не рекомендуется):
		git reset --hard 98081082bbc5f5fde14e14534ca85c9fb802e8ff
	
		git reset --soft 98081082bbc5f5fde14e14534ca85c9fb802e8ff или аналогичное этой записи git reset --soft HEAD~1 	- все изменения после указанного коммита будут добавлены в индекс (станут staged), коммит станет головой, дерево коммитов будет срезано до указанного коммита
		
		git reset --mixed HEAD test.txt 	- эквивалент git reset HEAD test.txt, возвращает изменения в unstaged, срезает дерево коммитов
		git reset 98081082bbc5f5fde14e14534ca85c9fb802e8ff 	- возвращает изменения в unstaged, срезает дерево коммитов
	Например мы хотим объединить 3 последние коммита, для этого мы их отменяем с помощью git reset 98081082bbc5f5fde14e14534ca85c9fb802e8ff, получить их в unstaged изменениях, и закоммитить сразу в 1 коммит
		git commit -a -m "Комментарий"
		
	
	git reset --hard 	- сбросит все внесенные изменения (как добавленные в индекс, так и не добавленные) до HEAD (головы)
		
Репозитории - обеспечивают параллельную работу над одним проектом нескольких человек
	локальные (на нашем сервере)
	удаленные (на удаленном сервере, м.б. облачном)
	
На сервере размещается центральный репозиторий у разработкчика локальный (рабочая копия).
Процесс получения собственной рабочей копии называется клонированием.
Чтобы изменения отправить обратно на сервер нужно выполнить команду git push.
git pull - выкачивает изменения, произошедшие в проекте со времени последнего обновления или первоначального клонирования.
Для создания репозитория на github-е используется визуальный интерфейс ресурса.

Ветки. Создание и управление
Билд - специальная сборка
Команда git status отображает название ветки, в которой мы находимся "on branch master".
Обычно процесс разработки включает в себя следующие ветки:
	master - основная
	hotfix - для мелких правок (когда все хорошо, но надо например подправить верстку на странице и больше ничего не трогать)
	develop - ветка, в которую разработчики вносят изменения
	feature - ветка для каких-то фич, которые в дальнейшем будут внедрены (например, новая форма авторизации)
	release - ветка очередного релиза
	
git checkout -b dev 	- создаст ветку с именем dev и переключится в нее
	
	
	
	
